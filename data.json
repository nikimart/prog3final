{
  "title": "Ionică Bizău",
  "desc": "Web Developer,  Linux geek and  Musician",
  "avatar": "/images/logo.png"
}
{
  "articles": [
    {
      "createdAt": "2017-07-09T20:00:00.000Z",
      "title": "Accessing My Home Computer Remotely",
      "tags": [
        "travel",
        "linux",
        "internet",
        "ssh"
      ],
      "content": "<p>I have a powerful ASUS machine which I use when I&apos;m at home. I guess it was designed for gaming. It&apos;s quite useful for any tasks, but I often use it for expensive tasks using more resources (e.g. training neural networks). It got a fast enough wired internet connection, as well! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//rocket.png\" title=\"rocket\" alt=\":rocket:\"></p>\n<p>When travelling, I do not have physical access to my home computer.  However, I do want to access it sometimes (when I work on projects requiring lots of computations). <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//airplane.png\" title=\"airplane\" alt=\":airplane:\"></p>\n<p>The solution I ended with is to connect to it via SSH. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//lock.png\" title=\"lock\" alt=\":lock:\"></p>\n<p>So, using my MacBook, I can simply run <code>ssh -A ionicabizau@&lt;public-ip&gt; -p &lt;port&gt;</code> and land in my home. There are a couple of problems, tho. Here is how I did it! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//sparkles.png\" title=\"sparkles\" alt=\":sparkles:\"></p>\n<h3 id=\"port-forwarding\">Port Forwarding</h3>\n<p>Using <code>ifconfig</code> we can see what IP the laptop got on the network:</p>\n<pre><code class=\"lang-sh\">$ ifconfig | grep <span class=\"number\">192</span>\n        inet <span class=\"number\">192.168</span><span class=\"number\">.2</span>.xxx  netmask <span class=\"number\">255.255</span><span class=\"number\">.255</span><span class=\"number\">.0</span>  broadcast <span class=\"number\">192.168</span><span class=\"number\">.2</span><span class=\"number\">.255</span>\n</code></pre>\n<p>(the <code>xxx</code> can be <code>100</code>, <code>101</code> etc).</p>\n<p>I opened <code>192.168.2.1</code> in the browser (accessing the router settings) and set up port forwarding on this port range: <code>2042-5042</code> and using the IP I got in the previous command.</p>\n<p>Then, I changed my laptop SSH server port and made it listen on <code>4242</code> (which, indeed, is in the range mentioned above).</p>\n<p>Restarted the router and then I did a <code>curl ipinfo.io</code> (which outputs the public IP information) and connected successfully to my machine, from my machine, but using the public IP.</p>\n<p>Great! There are a couple of issues, tho!</p>\n<p>If the laptop reconnects to the router, it may get a different IP on the network. Also, if the router reconnects to the internet, usually it happens to get a different public IP. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//boom.png\" title=\"boom\" alt=\":boom:\"></p>\n<h3 id=\"same-ip-on-the-network\">Same IP on the network</h3>\n<p>By running <code>ifconfig</code> I found out that the wired connection has the name <code>enp5s0</code>.</p>\n<p>Then, I modified the <code>/etc/network/interfaces</code> file like this (following a couple of articles from the internet):</p>\n<pre><code><span class=\"keyword\">auto</span> lo\niface lo inet loopback\n\n<span class=\"preprocessor\"># Set up a static ip on the network</span>\n<span class=\"keyword\">auto</span> enp5s0\niface enp5s0 inet <span class=\"keyword\">static</span>\naddress <span class=\"number\">192.168</span><span class=\"number\">.2</span><span class=\"number\">.142</span>\nnetmask <span class=\"number\">255.255</span><span class=\"number\">.255</span><span class=\"number\">.0</span>\ngateway <span class=\"number\">192.168</span><span class=\"number\">.2</span><span class=\"number\">.1</span>\ndns-nameservers <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span>\n</code></pre><p>Reconnected to the router, and I noticed <code>192.168.2.142</code> in the <code>ifconfig</code> output. Rebooted, and the ip didn&apos;t change.</p>\n<p>Now, I got back in the router settings and exposed the ports <code>2042-5042</code> on <code>192.168.2.142</code> to the internet.</p>\n<h3 id=\"but-the-public-ip-may-change-\">But the public IP may change...</h3>\n<p>I don&apos;t have a static IP. If I&apos;m not wrong, one has to pay to the internet provider to get a static IP. I don&apos;t care if it&apos;s going to change, as long I know what new public IP it got.</p>\n<p>I made a small tool which pushes the ip information in a GitHub repository: <a href=\"https://github.com/IonicaBizau/machine-ip\"><code>machine-ip</code></a>. It uses <a href=\"http://ipinfo.io/\"><code>ipinfo.io</code></a> to get the public ip information.</p>\n<p>I created a GitHub repository storing the ip information of my home machine. This is updated every 10 minutes automatically </p>\n<p><img src=\"https://i.imgur.com/1a6JWYl.png\" alt=\"\"></p>\n<p>IpInfo allows as to make <code>1000</code> daily requests for free. That is around 41 requests an hour (<code>1000 / 24</code> is <code>41.666...</code>). Therefore the 10-minute update, which is good enough.</p>\n<h3 id=\"running-this-in-a-cron-job\">Running this in a cron job</h3>\n<p>I made another script which is executed in a cron job.</p>\n<pre><code class=\"lang-sh\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;Adding the ssh key&quot;</span>\nssh-<span class=\"built_in\">add</span> /home/testing/.ssh/id_rsa\n<span class=\"keyword\">echo</span> <span class=\"string\">&quot;Changing directory&quot;</span>\n<span class=\"keyword\">cd</span> /johnnysapps/notebook\n<span class=\"keyword\">echo</span> <span class=\"string\">&quot;Getting the ip&quot;</span>\ndate &gt; last_updated.txt\nmachine-ip\n</code></pre>\n<p>I ran <code>sudo crontab -e -u testing</code> and created my first cron job I&apos;ve evern written:</p>\n<pre><code>SHELL=<span class=\"regexp\">/bin/</span>sh\nPATH=<span class=\"regexp\">/home/</span>testing/.nvm/versions/node/v6<span class=\"number\">.7</span><span class=\"number\">.0</span>/bin:<span class=\"regexp\">/home/</span>testing/bin:<span class=\"regexp\">/home/</span>testing/.local/bin:<span class=\"regexp\">/usr/</span>local/sbin:<span class=\"regexp\">/usr/</span>local/bin:<span class=\"regexp\">/usr/</span>sbin:<span class=\"regexp\">/usr/</span>bin:<span class=\"regexp\">/sbin:/</span>bin:<span class=\"regexp\">/usr/g</span>ames:<span class=\"regexp\">/usr/</span>local/games:<span class=\"regexp\">/snap/</span>bin\n\n# Min Hour Day Month Weekday Command\n*<span class=\"regexp\">/10  *    *   *     *       /</span>johnnysapps/ip\n</code></pre><p><code>*/10</code> tells the system to execute my script every 10 minutes.</p>\n<hr>\n<p>So, apparently, it&apos;s working! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//tada.png\" title=\"tada\" alt=\":tada:\"> Using my SSH keys I can connect to my home computer. In case the electricity goes down, I do hope it will not be down for more than 1-2 hours (which is supported by the internal battery).</p>\n<p>When the electricity is back, the modem, the router and my laptop are going to connect back to the internet and my cron job is going to push the new IP data in my GitHub account.</p>\n<p>Sweet! Now I can <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//airplane.png\" title=\"airplane\" alt=\":airplane:\"> <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//rocket.png\" title=\"rocket\" alt=\":rocket:\">!</p>"
    },
    {
      "createdAt": "2016-10-26T20:00:00.000Z",
      "title": "The Joy of Being a Mentor",
      "tags": [
        "mentoring",
        "coding",
        "nature"
      ],
      "content": "<p>Helping our fellow developers&#x2014;or generally speaking, helping each another&#x2014;is an important part of society. We all work and struggle on this planet, so offering a helping hand is always welcome. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//heart.png\" title=\"heart\" alt=\":heart:\"></p>\n<p><img src=\"https://i.imgur.com/TJUfjtX.jpg\" alt=\"\"></p>\n<p>It&apos;s been <em>more than one year</em> since started teaching people to code. I do it on <a href=\"https://codementor.io/johnnyb\">Codementor</a>&#x2014;an open marketplace for code instructors. In general, we set up 1:1 live sessions and start talking. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//smile.png\" title=\"smile\" alt=\":smile:\"> Then after we get everything fixed and finally both of us are happy.</p>\n<p>What I really like about Codementor is that it connects a diversity of people around the planet. Each mentee is unique (cultures, lifestyle, accent, beliefs etc.), but they all have <em>one single goal</em>: to <strong>learn</strong>&#x2014;and that&apos;s one of the facts that make us happy.</p>\n<p>While I do teach people to do stuff, I keep an open eye on things I can learn as well. For instance, I learned how to use Firebase by working with one of my favourite mentees! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//blush.png\" title=\"blush\" alt=\":blush:\"> Thanks! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//cake.png\" title=\"cake\" alt=\":cake:\"></p>\n<p>Obviously, that means I can now <a href=\"/training\">take care</a> of people wanting to learn Firebase as well.</p>\n<hr>\n<p><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//zap.png\" title=\"zap\" alt=\":zap:\"> <strong>Here&apos;s how I do it!</strong> <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//zap.png\" title=\"zap\" alt=\":zap:\"></p>\n<p>I&apos;m blessed to live in a small, peaceful, and friendly village from Romania, far enough from the noise of the cities and still have great people around, and of course, a great internet connection! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//earth_africa.png\" title=\"earth_africa\" alt=\":earth_africa:\"></p>\n<p>In the morning I enjoy the birds singing (if I wake up early enough, sometimes there are few owls hooting too) and in the evening I listen to the crickets&apos; songs.</p>\n<p><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//bulb.png\" title=\"bulb\" alt=\":bulb:\"> <strong>Tip:</strong> If you will ever need help in programming during the summer time, and we talk either in the morning or evening, you will have the opportunity to see the big crowd of cows going or coming back to and from the hill. It happens every sunny day, during the summer time. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//cow2.png\" title=\"cow2\" alt=\":cow2:\"></p>\n<p>Even though I&apos;m a remote developer working mostly from home, it&apos;s still a lot of hard-work. Rest and relaxation are important as well. I find that taking a few days break from work and hiking up the mountains helps a lot.</p>\n<p>Often I take my bike and ride it to my little house between two hills&#x2014;to be alone, hiding in the mountains for a while, after which I go back. There, I don&apos;t have internet nor phone signal. Being in a place where you can be alone with your thoughts for a good while is where great ideas are born. I note each one somewhere, and when I get the chance to implement them, I just do it. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//sparkles.png\" title=\"sparkles\" alt=\":sparkles:\"></p>\n<p><img src=\"https://i.imgur.com/LQTnaGm.jpg\" alt=\"\"></p>\n<p>Being in the middle of nature, listening to the flowing water, birds happily chirping all day is definitely something special&#x2014;it&apos;s closer to our roots. I believe that if we want to be productive developers, be a good person to talk to, or just be human, we should take a look at the values that our Creator implanted in us.</p>\n<h3 id=\"is-what-we-eat-and-drink-important-\">Is what we eat and drink important?</h3>\n<p>There is a strong relation between the food we eat and the way we think. We should have our brains clean and agile when teaching others.\nThat&apos;s done by knowing what, when, how, and how much to eat. As mentors, we should know the laws of life and health.</p>\n<p>Not all of us work remotely, but I do recommend to get out of the cities and purchase a land in the countryside and start cultivating your own garden.\nEat plants, not animals. We were designed to have a vegetarian diet.</p>\n<p>There are so many things going on in the cities. Noise, crimes, immorality, pollution, and other unfortunate events. We can avoid all these. Faith, hope, love, happiness can be cultivated way better in the countryside, away from the cities.</p>\n<h3 id=\"rest-is-important\">Rest is important</h3>\n<p>While working is definitely important, rest is equally as important&#x2014;if not, more so. Sleep 8 hours a night (sometimes before midnight) and wake up early in the morning.</p>\n<p><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//bulb.png\" title=\"bulb\" alt=\":bulb:\"> <strong>Tip:</strong> Bugs are much easier to fix in the morning than in the evening/night! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//joy.png\" title=\"joy\" alt=\":joy:\"></p>\n<p>We were designed to work the first six days of the week (Sunday to Friday), and then rest on the seventh day: <strong>Saturday</strong>. One of the secrets to be productive is to value each moment of our lives. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//hourglass_flowing_sand.png\" title=\"hourglass_flowing_sand\" alt=\":hourglass_flowing_sand:\"></p>\n<p><img src=\"https://i.imgur.com/6Pts1lz.jpg\" alt=\"\"></p>\n<hr>\n<p>Summarizing, I always recommended: leave the cities as soon as possible, stand for good principles, eat and drink healthy stuff, work six days a week and rest on the seventh one, help the people around you and love them. We have no time to waste! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//rocket.png\" title=\"rocket\" alt=\":rocket:\"></p>\n<p>PS: Most parts of this post were written near a forest, somewhere in the western part of Romania. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//evergreen_tree.png\" title=\"evergreen_tree\" alt=\":evergreen_tree:\"></p>\n<p><img src=\"https://i.imgur.com/k586u7B.jpg\" alt=\"\"></p>"
    },
    {
      "createdAt": "2016-09-20T20:00:00.000Z",
      "title": "How I npm",
      "tags": [
        "npm",
        "nodejs",
        "programming"
      ],
      "content": "<p>I write a lot of code every day, publishing my code on <a href=\"https://github.com/IonicaBizau\">GitHub</a> and <a href=\"https://npmjs.com/~ionicabizau\"><em>npm</em></a>. Each tiny package I create does something, and in most of the cases it&apos;s a module which can be used in other applications. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//four_leaf_clover.png\" title=\"four_leaf_clover\" alt=\":four_leaf_clover:\"></p>\n<p><img src=\"https://i.imgur.com/goDMZW9.png\" alt=\"\"></p>\n<h2 id=\"-thought_balloon-what-is-npm-\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//thought_balloon.png\" title=\"thought_balloon\" alt=\":thought_balloon:\"> What is <em>npm</em>?</h2>\n<p>In case you don&apos;t know, <a href=\"https://npmjs.com\"><em>npm</em></a> is the default package manager for Node.js. Note that there we can publish modules which are not Node.js specific.</p>\n<p>Its name stands for <em> <strong>n</strong>eed <strong>p</strong>ray <strong>m</strong>ore</em> (or <em>nuclear pizza machine</em>, or <em>npm&apos;s pretty magical</em> etc etc).</p>\n<blockquote>\n<p><strong>Whaaat?!</strong></p>\n</blockquote>\n<p>Well, if you are here and think that <em>npm</em> stands for <em>Node Package Manager</em>, I have to tell you that&apos;s also correct, but it&apos;s not complete. <em>npm</em> is <strong>not</strong> an acronym, but it&apos;s a recursive bacronym for <em> <strong>npm</strong> is not an acronym</em>. In short, <strong>npm is an bacronym</strong>, not an acronym like many people believe.</p>\n<p>You can refer to <a href=\"https://github.com/npm/npm-expansions\">npm/npm-expansions</a> for a list of things <em>npm</em> stands for. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//sparkles.png\" title=\"sparkles\" alt=\":sparkles:\"></p>\n<p>At this very moment while writing this post, I currently have 561 packages. You can view them <a href=\"https://npmjs.com/~ionicabizau\">here (<code>npm/~ionicabizau</code>)</a>.</p>\n<h2 id=\"-raised_hands-how-i-do-it\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//raised_hands.png\" title=\"raised_hands\" alt=\":raised_hands:\"> How I do it</h2>\n<p>I started learning Node.js at the end of the year 2012. I was enjoying using modules by others, but I published my first npm package in August 2013. It was <a href=\"https://npmjs.com/youtube-api\"><code>youtube-api</code></a>&#x2013;a friendly Node.js wrapper for the YouTube API. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//tv.png\" title=\"tv\" alt=\":tv:\"></p>\n<p>I liked the <code>npm publish</code>ing workflow and I didn&apos;t stop there. I created more and more packages.</p>\n<h2 id=\"-rocket-how-to-create-an-npm-package-\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//rocket.png\" title=\"rocket\" alt=\":rocket:\"> How to create an npm package?</h2>\n<p>Assuming you have Node.js and npm installed, you have to generate a <code>package.json</code> file then write your code and publish it:</p>\n<pre><code class=\"lang-sh\"><span class=\"comment\"># Generate the package.json file</span>\n<span class=\"built_in\">npm</span> init\n\n<span class=\"comment\"># Work on your magic</span>\necho <span class=\"string\">&apos;module.exports = 42&apos;</span> &gt; index.js\n\n<span class=\"comment\"># Publish the stuff</span>\n<span class=\"built_in\">npm</span> publish\n</code></pre>\n<p>But a good package should include good documentation as well as easy to use APIs and easy examples.</p>\n<h2 id=\"-crystal_ball-automatization-and-magic\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//crystal_ball.png\" title=\"crystal_ball\" alt=\":crystal_ball:\"> Automatization and Magic</h2>\n<p>From publishing new stuff on npm, I found that I was doing a bit of manual work every time. That included:</p>\n<ol>\n<li>Creating GitHub repositories</li>\n<li>Creating releases on GitHub</li>\n<li>Maintaing documentation in sync with the code</li>\n<li>Maintaining the same documentation format across the repositories</li>\n</ol>\n<p>I started to analyze where I wasted time and created small tools to do the work for me. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//construction_worker.png\" title=\"construction_worker\" alt=\":construction_worker:\"></p>\n<h3 id=\"-memo-blah-https-github-com-ionicabizau-blah-fancy-documentation\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//memo.png\" title=\"memo\" alt=\":memo:\"> <a href=\"https://github.com/IonicaBizau/blah\">Blah</a>: Fancy Documentation</h3>\n<p>I created a tool called <a href=\"https://github.com/IonicaBizau/blah\"><code>blah</code></a> which, since 2014, takes care of generating the documentation for me:</p>\n<ul>\n<li>It generates <code>README.md</code> files based on my templates.</li>\n<li>Handles custom stuff by looking at the <code>blah</code> field in <code>package.json</code></li>\n<li>Generates documentation by looking at the JSDoc comments from my code.</li>\n<li>Bumps the <code>package.json</code> version</li>\n<li>Creates the <code>CONTRIBUTING.md</code>, <code>LICENSE</code> (takes care of updating the year as well!), <code>.travis.yml</code> and <code>.gitignore</code> files</li>\n</ul>\n<p>Pretty cool. Since then I didn&apos;t have to manually write Markdown files anymore.</p>\n<h3 id=\"-page_with_curl-packy-https-github-com-ionicabizau-packy-package-json-defaults\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//page_with_curl.png\" title=\"page_with_curl\" alt=\":page_with_curl:\"> <a href=\"https://github.com/IonicaBizau/packy\">Packy</a>: <code>package.json</code> defaults</h3>\n<p>Every time you <code>npm init</code> a package, you have to write stuff like the <code>author</code>, git repository, <code>license</code> etc.</p>\n<p>I created <code>packy</code> which takes static (e.g. author) and dynamic (e.g. git repository url) fields by looking at a configuration file.</p>\n<p>After this, I was manually writing the <code>name</code> and <code>description</code> fields and then skipping the others. Then, I ran <code>packy</code> which was autocompleting the <code>author</code>, <code>keywords</code>, git-related stuff and so on.</p>\n<p>Since <code>blah</code> can run custom commands for me, I decided to integrate <code>packy</code> in my <code>blah</code> configuration.</p>\n<h3 id=\"-tophat-np-init-https-github-com-ionicabizau-np-init-automagically-create-new-packages\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//tophat.png\" title=\"tophat\" alt=\":tophat:\"> <a href=\"https://github.com/IonicaBizau/np-init\">np-init</a>: Automagically create new packages</h3>\n<p>Because I was still lazy to create the files manually, I created <a href=\"https://github.com/IonicaBizau/np-init\"><code>np-init</code></a> which creates a minimal npm module:</p>\n<pre><code class=\"lang-sh\">np-init my-<span class=\"keyword\">super</span>-<span class=\"keyword\">package</span>-name <span class=\"string\">&apos;Some fancy description&apos;</span>\n</code></pre>\n<p>Then I just have to <code>cd my-super-package-name</code> and work on my code directly because everything is there for me (<code>example/index.js</code>, <code>lib/index.js</code>, <code>package.json</code> etc).</p>\n<h3 id=\"-dizzy-babel-it-https-github-com-ionicabizau-babel-it-babelify-the-things\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//dizzy.png\" title=\"dizzy\" alt=\":dizzy:\"> <a href=\"https://github.com/IonicaBizau/babel-it\">babel-it</a>: Babelify the things</h3>\n<p>Because I started to use ES2015 features in my code and since many people use versions of Node.js which do <em>not</em> support ES2015, I started publishing transpilled versions of my code on npm.</p>\n<p>After building <a href=\"https://github.com/IonicaBizau/babel-it\"><code>babel-it</code></a>, I replaced the <code>npm publish</code> command with <strong><code>babel-it</code></strong>! That is smart enough to babelify my code, publish it on npm and then rollback to my original code.</p>\n<h3 id=\"-ship-ship-release-https-github-com-ionicabizau-ship-release-\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//ship.png\" title=\"ship\" alt=\":ship:\"> <a href=\"https://github.com/IonicaBizau/ship-release\">Ship Release</a></h3>\n<p>The publishing process was boring again. I decided to create a tool to take care of that: <a href=\"https://github.com/IonicaBizau/ship-release\"><code>ship-release</code></a>.</p>\n<p>So that being said, I don&apos;t even need to take care of babelifying the things because <code>ship-release</code> does that (using <code>babel-it</code>).</p>\n<p>After fixing a bug into a package, I simply do:</p>\n<pre><code class=\"lang-sh\"><span class=\"comment\"># Creates and switches on the new-version branch</span>\nship-release branch -m <span class=\"string\">&apos;Fixed some nasty bug&apos;</span>\n\n<span class=\"comment\"># Bump the version</span>\nship-release bump\n\n<span class=\"comment\"># Publish</span>\n<span class=\"comment\">#  - generate docs using Blah</span>\n<span class=\"comment\">#  - push the changes on GitHub</span>\n<span class=\"comment\">#  - create and merge the pull request</span>\n<span class=\"comment\">#  - create a new release in the GitHub repository</span>\n<span class=\"comment\">#  - transpile the code</span>\n<span class=\"comment\">#  - publish the new version on npm</span>\nship-release publish <span class=\"operator\">-d</span> <span class=\"string\">&apos;Fixed some nasty bug.&apos;</span>\n</code></pre>\n<hr>\n<p>That&apos;s the theory. Let&apos;s see all these running in the real world.</p>\n<h2 id=\"example\">Example</h2>\n<p>Today I&apos;m creating a small module called <code>stream-data</code> which will collect the data emitted by a stream and send it into a callback.</p>\n<h3 id=\"creating-the-package\">Creating the package</h3>\n<p>As mentioned above, I&apos;m using <code>np-init</code> to do that:</p>\n<pre><code class=\"lang-sh\">np-init stream-data &apos;Collect <span class=\"keyword\">the</span> stream data <span class=\"keyword\">and</span> send <span class=\"keyword\">it</span> <span class=\"keyword\">into</span> a callback function.&apos;\n</code></pre>\n<p>This created the following directory:</p>\n<pre><code class=\"lang-sh\">stream-data/\n&#x251C;&#x2500;&#x2500; (.git)\n&#x251C;&#x2500;&#x2500; example\n&#x2502;   &#x2514;&#x2500;&#x2500; index.js\n&#x251C;&#x2500;&#x2500; <span class=\"class\"><span class=\"keyword\">lib</span></span>\n&#x2502;   &#x2514;&#x2500;&#x2500; index.js\n&#x2514;&#x2500;&#x2500; package.json\n\n<span class=\"number\">2</span> directories, <span class=\"number\">3</span> files\n</code></pre>\n<h3 id=\"write-a-minimal-example\">Write a minimal example</h3>\n<p>When building a house, you have to start with the base. When building an npm package, I like to start with the roof.</p>\n<p>Even if the library doesn&apos;t do anything yet, I just set up an example the way I&apos;m thinking I want the module to work.</p>\n<p>So, I <code>cd stream-data</code> and write this (note that I already had something there created by <code>np-init</code>):</p>\n<pre><code class=\"lang-js\"><span class=\"pi\">&quot;use strict&quot;</span>;\n\n<span class=\"keyword\">const</span> streamData = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;../lib&quot;</span>)\n    , fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>)\n    ;\n\n<span class=\"comment\">// Create a read stream</span>\n<span class=\"keyword\">let</span> str = fs.createReadStream(<span class=\"string\">`<span class=\"subst\">${__dirname}</span>/input.txt`</span>);\n\n<span class=\"comment\">// Pass the stream object and a callback function</span>\nstreamData(str, (err, data) =&gt; {\n    <span class=\"built_in\">console</span>.log(err || data);\n    <span class=\"comment\">// =&gt; &quot;Hello World&quot;</span>\n});\n</code></pre>\n<h3 id=\"write-the-functionality-in-the-library\">Write the functionality in the library</h3>\n<p><code>np-init</code> generated a JSDoc comment, which initially looked like this:</p>\n<pre><code class=\"lang-js\">/<span class=\"keyword\">*</span><span class=\"keyword\">*</span>\n <span class=\"keyword\">*</span> streamData\n <span class=\"keyword\">*</span> Collect the stream data and send it into a callback function.\n <span class=\"keyword\">*</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@name streamData</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@function</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@param {Number} a Param descrpition.</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@param {Number} b Param descrpition.</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@return {Number} Return description.</span>\n <span class=\"keyword\">*</span>/\n</code></pre>\n<p>I slightly changed the function parameters&apos; names and updated the JSDoc comment:</p>\n<pre><code class=\"lang-js\"><span class=\"string\">&quot;use strict&quot;</span>;\n\n<span class=\"comment\">/**\n * streamData\n * Collect the stream data and send it into a callback function.\n *\n * <span class=\"doctag\">@name</span> streamData\n * <span class=\"doctag\">@function</span>\n * <span class=\"doctag\">@param</span> {Stream} str The stream object.\n * <span class=\"doctag\">@param</span> {Function} cb The callback function.\n * <span class=\"doctag\">@returns</span> {Stream} The stream object.\n */</span>\nmodule.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">streamData</span> <span class=\"params\">(str, cb)</span> </span>{\n\n    <span class=\"keyword\">if</span> (cb) {\n        <span class=\"keyword\">let</span> buffer = []\n          , error = <span class=\"keyword\">null</span>\n          ;\n\n        str.on(<span class=\"string\">&quot;data&quot;</span>, chunk =&gt; buffer.push(chunk));\n        str.on(<span class=\"string\">&quot;error&quot;</span>, err =&gt; error = err);\n        str.on(<span class=\"string\">&quot;end&quot;</span>, () =&gt; cb(error, buffer.join(<span class=\"string\">&quot;&quot;</span>), buffer));\n    }\n\n    <span class=\"keyword\">return</span> str;\n};\n</code></pre>\n<h3 id=\"run-the-example\">Run the example</h3>\n<p>Well, now we can see if it&apos;s really working.</p>\n<pre><code class=\"lang-sh\">$ <span class=\"keyword\">node</span><span class=\"identifier\"> </span><span class=\"title\">example</span>/\nHello World!\n</code></pre>\n<p>Before publishing it, we need to set up some tests.</p>\n<h3 id=\"tests\">Tests</h3>\n<p>For testing I use <a href=\"https://github.com/IonicaBizau/tester\"><code>tester</code></a>. To add <code>tester</code> in my project I do <a href=\"https://github.com/IonicaBizau/tester-init\"><code>tester-init</code></a>.</p>\n<pre><code class=\"lang-sh\">$ tester-init\n<span class=\"bullet\">...\n</span>$ tree\n<span class=\"bullet\">...\n</span>&#x2514;&#x2500;&#x2500; test\n<span class=\"code\">    &#x2514;&#x2500;&#x2500; index.js</span>\n</code></pre>\n<p>After writing a few tests, the module is ready to be published on GitHub and npm.</p>\n<h3 id=\"publishing\">Publishing</h3>\n<p>We have to create a GitHub repository. I use <a href=\"https://github.com/mattdesl/ghrepo\"><code>ghrepo</code></a> by <a href=\"https://github.com/mattdesl\"><strong>@mattdesl</strong></a> (thanks! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//cake.png\" title=\"cake\" alt=\":cake:\"> <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//grin.png\" title=\"grin\" alt=\":grin:\">). It&apos;s smart enough to create the GitHub repository with the right data (taken from the local git repository url and <code>package.json</code>).</p>\n<pre><code class=\"lang-sh\">ghrepo <span class=\"comment\">--bare --no-open</span>\nship-<span class=\"operator\"><span class=\"keyword\">release</span> bump\nship-<span class=\"keyword\">release</span> publish -<span class=\"keyword\">d</span> <span class=\"string\">&apos;Initial release&apos;</span></span>\n</code></pre>\n<p>Looking in my directory now, I have a couple of new files (<code>README.md</code>, <code>CONTRIBUTING.md</code>, <code>.gitignore</code> etc).</p>\n<p>Now my module is on GitHub and npm ready to be <code>npm install</code>ed:</p>\n<pre><code class=\"lang-js\"><span class=\"comment\">// After doing: `npm install --save stream-data`</span>\n\n<span class=\"keyword\">const</span> streamData = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;stream-data&quot;</span>)\n    , fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>)\n    ;\n\n<span class=\"comment\">// Create a read stream</span>\n<span class=\"keyword\">let</span> str = fs.createReadStream(<span class=\"string\">`<span class=\"subst\">${__dirname}</span>/input.txt`</span>);\n\n<span class=\"comment\">// Pass the stream object and a callback function</span>\nstreamData(str, (err, data) =&gt; {\n    <span class=\"built_in\">console</span>.log(err || data);\n});\n</code></pre>\n<h2 id=\"-mortar_board-things-i-learned\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//mortar_board.png\" title=\"mortar_board\" alt=\":mortar_board:\"> Things I learned</h2>\n<p>Do not do manual work. Optimize things as much as you can. Otherwise, you&apos;ll waste your precious time. Create your team of bots to help you to optimize things.</p>\n<p>Happy <em>npm</em>ing! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//tada.png\" title=\"tada\" alt=\":tada:\"></p>\n<hr>\n<p><sub>If you like to support what I do, <a href=\"/donate\">here is how you can do it</a>.</sub></p>"
    }
  ],
  "pages": [
    {
      "title": "Blog",
      "url": "/"
    },
    {
      "title": "About",
      "url": "/about"
    },
    {
      "title": "FAQ",
      "url": "/faq"
    },
    {
      "title": "Training",
      "url": "/training"
    },
    {
      "title": "Contact",
      "url": "/contact"
    },
    {
      "title": "Donate",
      "url": "/donate"
    },
    {
      "title": "CV",
      "url": "/cv"
    }
  ],
  "title": "Ionică Bizău",
  "desc": "Web Developer,  Linux geek and  Musician",
  "avatar": "/images/logo.png"
}
{
  "articles": [
    {
      "createdAt": "2017-07-09T20:00:00.000Z",
      "title": "Accessing My Home Computer Remotely",
      "tags": [
        "travel",
        "linux",
        "internet",
        "ssh"
      ],
      "content": "<p>I have a powerful ASUS machine which I use when I&apos;m at home. I guess it was designed for gaming. It&apos;s quite useful for any tasks, but I often use it for expensive tasks using more resources (e.g. training neural networks). It got a fast enough wired internet connection, as well! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//rocket.png\" title=\"rocket\" alt=\":rocket:\"></p>\n<p>When travelling, I do not have physical access to my home computer.  However, I do want to access it sometimes (when I work on projects requiring lots of computations). <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//airplane.png\" title=\"airplane\" alt=\":airplane:\"></p>\n<p>The solution I ended with is to connect to it via SSH. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//lock.png\" title=\"lock\" alt=\":lock:\"></p>\n<p>So, using my MacBook, I can simply run <code>ssh -A ionicabizau@&lt;public-ip&gt; -p &lt;port&gt;</code> and land in my home. There are a couple of problems, tho. Here is how I did it! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//sparkles.png\" title=\"sparkles\" alt=\":sparkles:\"></p>\n<h3 id=\"port-forwarding\">Port Forwarding</h3>\n<p>Using <code>ifconfig</code> we can see what IP the laptop got on the network:</p>\n<pre><code class=\"lang-sh\">$ ifconfig | grep <span class=\"number\">192</span>\n        inet <span class=\"number\">192.168</span><span class=\"number\">.2</span>.xxx  netmask <span class=\"number\">255.255</span><span class=\"number\">.255</span><span class=\"number\">.0</span>  broadcast <span class=\"number\">192.168</span><span class=\"number\">.2</span><span class=\"number\">.255</span>\n</code></pre>\n<p>(the <code>xxx</code> can be <code>100</code>, <code>101</code> etc).</p>\n<p>I opened <code>192.168.2.1</code> in the browser (accessing the router settings) and set up port forwarding on this port range: <code>2042-5042</code> and using the IP I got in the previous command.</p>\n<p>Then, I changed my laptop SSH server port and made it listen on <code>4242</code> (which, indeed, is in the range mentioned above).</p>\n<p>Restarted the router and then I did a <code>curl ipinfo.io</code> (which outputs the public IP information) and connected successfully to my machine, from my machine, but using the public IP.</p>\n<p>Great! There are a couple of issues, tho!</p>\n<p>If the laptop reconnects to the router, it may get a different IP on the network. Also, if the router reconnects to the internet, usually it happens to get a different public IP. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//boom.png\" title=\"boom\" alt=\":boom:\"></p>\n<h3 id=\"same-ip-on-the-network\">Same IP on the network</h3>\n<p>By running <code>ifconfig</code> I found out that the wired connection has the name <code>enp5s0</code>.</p>\n<p>Then, I modified the <code>/etc/network/interfaces</code> file like this (following a couple of articles from the internet):</p>\n<pre><code><span class=\"keyword\">auto</span> lo\niface lo inet loopback\n\n<span class=\"preprocessor\"># Set up a static ip on the network</span>\n<span class=\"keyword\">auto</span> enp5s0\niface enp5s0 inet <span class=\"keyword\">static</span>\naddress <span class=\"number\">192.168</span><span class=\"number\">.2</span><span class=\"number\">.142</span>\nnetmask <span class=\"number\">255.255</span><span class=\"number\">.255</span><span class=\"number\">.0</span>\ngateway <span class=\"number\">192.168</span><span class=\"number\">.2</span><span class=\"number\">.1</span>\ndns-nameservers <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span>\n</code></pre><p>Reconnected to the router, and I noticed <code>192.168.2.142</code> in the <code>ifconfig</code> output. Rebooted, and the ip didn&apos;t change.</p>\n<p>Now, I got back in the router settings and exposed the ports <code>2042-5042</code> on <code>192.168.2.142</code> to the internet.</p>\n<h3 id=\"but-the-public-ip-may-change-\">But the public IP may change...</h3>\n<p>I don&apos;t have a static IP. If I&apos;m not wrong, one has to pay to the internet provider to get a static IP. I don&apos;t care if it&apos;s going to change, as long I know what new public IP it got.</p>\n<p>I made a small tool which pushes the ip information in a GitHub repository: <a href=\"https://github.com/IonicaBizau/machine-ip\"><code>machine-ip</code></a>. It uses <a href=\"http://ipinfo.io/\"><code>ipinfo.io</code></a> to get the public ip information.</p>\n<p>I created a GitHub repository storing the ip information of my home machine. This is updated every 10 minutes automatically </p>\n<p><img src=\"https://i.imgur.com/1a6JWYl.png\" alt=\"\"></p>\n<p>IpInfo allows as to make <code>1000</code> daily requests for free. That is around 41 requests an hour (<code>1000 / 24</code> is <code>41.666...</code>). Therefore the 10-minute update, which is good enough.</p>\n<h3 id=\"running-this-in-a-cron-job\">Running this in a cron job</h3>\n<p>I made another script which is executed in a cron job.</p>\n<pre><code class=\"lang-sh\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;Adding the ssh key&quot;</span>\nssh-<span class=\"built_in\">add</span> /home/testing/.ssh/id_rsa\n<span class=\"keyword\">echo</span> <span class=\"string\">&quot;Changing directory&quot;</span>\n<span class=\"keyword\">cd</span> /johnnysapps/notebook\n<span class=\"keyword\">echo</span> <span class=\"string\">&quot;Getting the ip&quot;</span>\ndate &gt; last_updated.txt\nmachine-ip\n</code></pre>\n<p>I ran <code>sudo crontab -e -u testing</code> and created my first cron job I&apos;ve evern written:</p>\n<pre><code>SHELL=<span class=\"regexp\">/bin/</span>sh\nPATH=<span class=\"regexp\">/home/</span>testing/.nvm/versions/node/v6<span class=\"number\">.7</span><span class=\"number\">.0</span>/bin:<span class=\"regexp\">/home/</span>testing/bin:<span class=\"regexp\">/home/</span>testing/.local/bin:<span class=\"regexp\">/usr/</span>local/sbin:<span class=\"regexp\">/usr/</span>local/bin:<span class=\"regexp\">/usr/</span>sbin:<span class=\"regexp\">/usr/</span>bin:<span class=\"regexp\">/sbin:/</span>bin:<span class=\"regexp\">/usr/g</span>ames:<span class=\"regexp\">/usr/</span>local/games:<span class=\"regexp\">/snap/</span>bin\n\n# Min Hour Day Month Weekday Command\n*<span class=\"regexp\">/10  *    *   *     *       /</span>johnnysapps/ip\n</code></pre><p><code>*/10</code> tells the system to execute my script every 10 minutes.</p>\n<hr>\n<p>So, apparently, it&apos;s working! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//tada.png\" title=\"tada\" alt=\":tada:\"> Using my SSH keys I can connect to my home computer. In case the electricity goes down, I do hope it will not be down for more than 1-2 hours (which is supported by the internal battery).</p>\n<p>When the electricity is back, the modem, the router and my laptop are going to connect back to the internet and my cron job is going to push the new IP data in my GitHub account.</p>\n<p>Sweet! Now I can <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//airplane.png\" title=\"airplane\" alt=\":airplane:\"> <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//rocket.png\" title=\"rocket\" alt=\":rocket:\">!</p>"
    },
    {
      "createdAt": "2016-10-26T20:00:00.000Z",
      "title": "The Joy of Being a Mentor",
      "tags": [
        "mentoring",
        "coding",
        "nature"
      ],
      "content": "<p>Helping our fellow developers&#x2014;or generally speaking, helping each another&#x2014;is an important part of society. We all work and struggle on this planet, so offering a helping hand is always welcome. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//heart.png\" title=\"heart\" alt=\":heart:\"></p>\n<p><img src=\"https://i.imgur.com/TJUfjtX.jpg\" alt=\"\"></p>\n<p>It&apos;s been <em>more than one year</em> since started teaching people to code. I do it on <a href=\"https://codementor.io/johnnyb\">Codementor</a>&#x2014;an open marketplace for code instructors. In general, we set up 1:1 live sessions and start talking. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//smile.png\" title=\"smile\" alt=\":smile:\"> Then after we get everything fixed and finally both of us are happy.</p>\n<p>What I really like about Codementor is that it connects a diversity of people around the planet. Each mentee is unique (cultures, lifestyle, accent, beliefs etc.), but they all have <em>one single goal</em>: to <strong>learn</strong>&#x2014;and that&apos;s one of the facts that make us happy.</p>\n<p>While I do teach people to do stuff, I keep an open eye on things I can learn as well. For instance, I learned how to use Firebase by working with one of my favourite mentees! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//blush.png\" title=\"blush\" alt=\":blush:\"> Thanks! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//cake.png\" title=\"cake\" alt=\":cake:\"></p>\n<p>Obviously, that means I can now <a href=\"/training\">take care</a> of people wanting to learn Firebase as well.</p>\n<hr>\n<p><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//zap.png\" title=\"zap\" alt=\":zap:\"> <strong>Here&apos;s how I do it!</strong> <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//zap.png\" title=\"zap\" alt=\":zap:\"></p>\n<p>I&apos;m blessed to live in a small, peaceful, and friendly village from Romania, far enough from the noise of the cities and still have great people around, and of course, a great internet connection! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//earth_africa.png\" title=\"earth_africa\" alt=\":earth_africa:\"></p>\n<p>In the morning I enjoy the birds singing (if I wake up early enough, sometimes there are few owls hooting too) and in the evening I listen to the crickets&apos; songs.</p>\n<p><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//bulb.png\" title=\"bulb\" alt=\":bulb:\"> <strong>Tip:</strong> If you will ever need help in programming during the summer time, and we talk either in the morning or evening, you will have the opportunity to see the big crowd of cows going or coming back to and from the hill. It happens every sunny day, during the summer time. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//cow2.png\" title=\"cow2\" alt=\":cow2:\"></p>\n<p>Even though I&apos;m a remote developer working mostly from home, it&apos;s still a lot of hard-work. Rest and relaxation are important as well. I find that taking a few days break from work and hiking up the mountains helps a lot.</p>\n<p>Often I take my bike and ride it to my little house between two hills&#x2014;to be alone, hiding in the mountains for a while, after which I go back. There, I don&apos;t have internet nor phone signal. Being in a place where you can be alone with your thoughts for a good while is where great ideas are born. I note each one somewhere, and when I get the chance to implement them, I just do it. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//sparkles.png\" title=\"sparkles\" alt=\":sparkles:\"></p>\n<p><img src=\"https://i.imgur.com/LQTnaGm.jpg\" alt=\"\"></p>\n<p>Being in the middle of nature, listening to the flowing water, birds happily chirping all day is definitely something special&#x2014;it&apos;s closer to our roots. I believe that if we want to be productive developers, be a good person to talk to, or just be human, we should take a look at the values that our Creator implanted in us.</p>\n<h3 id=\"is-what-we-eat-and-drink-important-\">Is what we eat and drink important?</h3>\n<p>There is a strong relation between the food we eat and the way we think. We should have our brains clean and agile when teaching others.\nThat&apos;s done by knowing what, when, how, and how much to eat. As mentors, we should know the laws of life and health.</p>\n<p>Not all of us work remotely, but I do recommend to get out of the cities and purchase a land in the countryside and start cultivating your own garden.\nEat plants, not animals. We were designed to have a vegetarian diet.</p>\n<p>There are so many things going on in the cities. Noise, crimes, immorality, pollution, and other unfortunate events. We can avoid all these. Faith, hope, love, happiness can be cultivated way better in the countryside, away from the cities.</p>\n<h3 id=\"rest-is-important\">Rest is important</h3>\n<p>While working is definitely important, rest is equally as important&#x2014;if not, more so. Sleep 8 hours a night (sometimes before midnight) and wake up early in the morning.</p>\n<p><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//bulb.png\" title=\"bulb\" alt=\":bulb:\"> <strong>Tip:</strong> Bugs are much easier to fix in the morning than in the evening/night! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//joy.png\" title=\"joy\" alt=\":joy:\"></p>\n<p>We were designed to work the first six days of the week (Sunday to Friday), and then rest on the seventh day: <strong>Saturday</strong>. One of the secrets to be productive is to value each moment of our lives. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//hourglass_flowing_sand.png\" title=\"hourglass_flowing_sand\" alt=\":hourglass_flowing_sand:\"></p>\n<p><img src=\"https://i.imgur.com/6Pts1lz.jpg\" alt=\"\"></p>\n<hr>\n<p>Summarizing, I always recommended: leave the cities as soon as possible, stand for good principles, eat and drink healthy stuff, work six days a week and rest on the seventh one, help the people around you and love them. We have no time to waste! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//rocket.png\" title=\"rocket\" alt=\":rocket:\"></p>\n<p>PS: Most parts of this post were written near a forest, somewhere in the western part of Romania. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//evergreen_tree.png\" title=\"evergreen_tree\" alt=\":evergreen_tree:\"></p>\n<p><img src=\"https://i.imgur.com/k586u7B.jpg\" alt=\"\"></p>"
    },
    {
      "createdAt": "2016-09-20T20:00:00.000Z",
      "title": "How I npm",
      "tags": [
        "npm",
        "nodejs",
        "programming"
      ],
      "content": "<p>I write a lot of code every day, publishing my code on <a href=\"https://github.com/IonicaBizau\">GitHub</a> and <a href=\"https://npmjs.com/~ionicabizau\"><em>npm</em></a>. Each tiny package I create does something, and in most of the cases it&apos;s a module which can be used in other applications. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//four_leaf_clover.png\" title=\"four_leaf_clover\" alt=\":four_leaf_clover:\"></p>\n<p><img src=\"https://i.imgur.com/goDMZW9.png\" alt=\"\"></p>\n<h2 id=\"-thought_balloon-what-is-npm-\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//thought_balloon.png\" title=\"thought_balloon\" alt=\":thought_balloon:\"> What is <em>npm</em>?</h2>\n<p>In case you don&apos;t know, <a href=\"https://npmjs.com\"><em>npm</em></a> is the default package manager for Node.js. Note that there we can publish modules which are not Node.js specific.</p>\n<p>Its name stands for <em> <strong>n</strong>eed <strong>p</strong>ray <strong>m</strong>ore</em> (or <em>nuclear pizza machine</em>, or <em>npm&apos;s pretty magical</em> etc etc).</p>\n<blockquote>\n<p><strong>Whaaat?!</strong></p>\n</blockquote>\n<p>Well, if you are here and think that <em>npm</em> stands for <em>Node Package Manager</em>, I have to tell you that&apos;s also correct, but it&apos;s not complete. <em>npm</em> is <strong>not</strong> an acronym, but it&apos;s a recursive bacronym for <em> <strong>npm</strong> is not an acronym</em>. In short, <strong>npm is an bacronym</strong>, not an acronym like many people believe.</p>\n<p>You can refer to <a href=\"https://github.com/npm/npm-expansions\">npm/npm-expansions</a> for a list of things <em>npm</em> stands for. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//sparkles.png\" title=\"sparkles\" alt=\":sparkles:\"></p>\n<p>At this very moment while writing this post, I currently have 561 packages. You can view them <a href=\"https://npmjs.com/~ionicabizau\">here (<code>npm/~ionicabizau</code>)</a>.</p>\n<h2 id=\"-raised_hands-how-i-do-it\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//raised_hands.png\" title=\"raised_hands\" alt=\":raised_hands:\"> How I do it</h2>\n<p>I started learning Node.js at the end of the year 2012. I was enjoying using modules by others, but I published my first npm package in August 2013. It was <a href=\"https://npmjs.com/youtube-api\"><code>youtube-api</code></a>&#x2013;a friendly Node.js wrapper for the YouTube API. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//tv.png\" title=\"tv\" alt=\":tv:\"></p>\n<p>I liked the <code>npm publish</code>ing workflow and I didn&apos;t stop there. I created more and more packages.</p>\n<h2 id=\"-rocket-how-to-create-an-npm-package-\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//rocket.png\" title=\"rocket\" alt=\":rocket:\"> How to create an npm package?</h2>\n<p>Assuming you have Node.js and npm installed, you have to generate a <code>package.json</code> file then write your code and publish it:</p>\n<pre><code class=\"lang-sh\"><span class=\"comment\"># Generate the package.json file</span>\n<span class=\"built_in\">npm</span> init\n\n<span class=\"comment\"># Work on your magic</span>\necho <span class=\"string\">&apos;module.exports = 42&apos;</span> &gt; index.js\n\n<span class=\"comment\"># Publish the stuff</span>\n<span class=\"built_in\">npm</span> publish\n</code></pre>\n<p>But a good package should include good documentation as well as easy to use APIs and easy examples.</p>\n<h2 id=\"-crystal_ball-automatization-and-magic\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//crystal_ball.png\" title=\"crystal_ball\" alt=\":crystal_ball:\"> Automatization and Magic</h2>\n<p>From publishing new stuff on npm, I found that I was doing a bit of manual work every time. That included:</p>\n<ol>\n<li>Creating GitHub repositories</li>\n<li>Creating releases on GitHub</li>\n<li>Maintaing documentation in sync with the code</li>\n<li>Maintaining the same documentation format across the repositories</li>\n</ol>\n<p>I started to analyze where I wasted time and created small tools to do the work for me. <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//construction_worker.png\" title=\"construction_worker\" alt=\":construction_worker:\"></p>\n<h3 id=\"-memo-blah-https-github-com-ionicabizau-blah-fancy-documentation\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//memo.png\" title=\"memo\" alt=\":memo:\"> <a href=\"https://github.com/IonicaBizau/blah\">Blah</a>: Fancy Documentation</h3>\n<p>I created a tool called <a href=\"https://github.com/IonicaBizau/blah\"><code>blah</code></a> which, since 2014, takes care of generating the documentation for me:</p>\n<ul>\n<li>It generates <code>README.md</code> files based on my templates.</li>\n<li>Handles custom stuff by looking at the <code>blah</code> field in <code>package.json</code></li>\n<li>Generates documentation by looking at the JSDoc comments from my code.</li>\n<li>Bumps the <code>package.json</code> version</li>\n<li>Creates the <code>CONTRIBUTING.md</code>, <code>LICENSE</code> (takes care of updating the year as well!), <code>.travis.yml</code> and <code>.gitignore</code> files</li>\n</ul>\n<p>Pretty cool. Since then I didn&apos;t have to manually write Markdown files anymore.</p>\n<h3 id=\"-page_with_curl-packy-https-github-com-ionicabizau-packy-package-json-defaults\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//page_with_curl.png\" title=\"page_with_curl\" alt=\":page_with_curl:\"> <a href=\"https://github.com/IonicaBizau/packy\">Packy</a>: <code>package.json</code> defaults</h3>\n<p>Every time you <code>npm init</code> a package, you have to write stuff like the <code>author</code>, git repository, <code>license</code> etc.</p>\n<p>I created <code>packy</code> which takes static (e.g. author) and dynamic (e.g. git repository url) fields by looking at a configuration file.</p>\n<p>After this, I was manually writing the <code>name</code> and <code>description</code> fields and then skipping the others. Then, I ran <code>packy</code> which was autocompleting the <code>author</code>, <code>keywords</code>, git-related stuff and so on.</p>\n<p>Since <code>blah</code> can run custom commands for me, I decided to integrate <code>packy</code> in my <code>blah</code> configuration.</p>\n<h3 id=\"-tophat-np-init-https-github-com-ionicabizau-np-init-automagically-create-new-packages\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//tophat.png\" title=\"tophat\" alt=\":tophat:\"> <a href=\"https://github.com/IonicaBizau/np-init\">np-init</a>: Automagically create new packages</h3>\n<p>Because I was still lazy to create the files manually, I created <a href=\"https://github.com/IonicaBizau/np-init\"><code>np-init</code></a> which creates a minimal npm module:</p>\n<pre><code class=\"lang-sh\">np-init my-<span class=\"keyword\">super</span>-<span class=\"keyword\">package</span>-name <span class=\"string\">&apos;Some fancy description&apos;</span>\n</code></pre>\n<p>Then I just have to <code>cd my-super-package-name</code> and work on my code directly because everything is there for me (<code>example/index.js</code>, <code>lib/index.js</code>, <code>package.json</code> etc).</p>\n<h3 id=\"-dizzy-babel-it-https-github-com-ionicabizau-babel-it-babelify-the-things\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//dizzy.png\" title=\"dizzy\" alt=\":dizzy:\"> <a href=\"https://github.com/IonicaBizau/babel-it\">babel-it</a>: Babelify the things</h3>\n<p>Because I started to use ES2015 features in my code and since many people use versions of Node.js which do <em>not</em> support ES2015, I started publishing transpilled versions of my code on npm.</p>\n<p>After building <a href=\"https://github.com/IonicaBizau/babel-it\"><code>babel-it</code></a>, I replaced the <code>npm publish</code> command with <strong><code>babel-it</code></strong>! That is smart enough to babelify my code, publish it on npm and then rollback to my original code.</p>\n<h3 id=\"-ship-ship-release-https-github-com-ionicabizau-ship-release-\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//ship.png\" title=\"ship\" alt=\":ship:\"> <a href=\"https://github.com/IonicaBizau/ship-release\">Ship Release</a></h3>\n<p>The publishing process was boring again. I decided to create a tool to take care of that: <a href=\"https://github.com/IonicaBizau/ship-release\"><code>ship-release</code></a>.</p>\n<p>So that being said, I don&apos;t even need to take care of babelifying the things because <code>ship-release</code> does that (using <code>babel-it</code>).</p>\n<p>After fixing a bug into a package, I simply do:</p>\n<pre><code class=\"lang-sh\"><span class=\"comment\"># Creates and switches on the new-version branch</span>\nship-release branch -m <span class=\"string\">&apos;Fixed some nasty bug&apos;</span>\n\n<span class=\"comment\"># Bump the version</span>\nship-release bump\n\n<span class=\"comment\"># Publish</span>\n<span class=\"comment\">#  - generate docs using Blah</span>\n<span class=\"comment\">#  - push the changes on GitHub</span>\n<span class=\"comment\">#  - create and merge the pull request</span>\n<span class=\"comment\">#  - create a new release in the GitHub repository</span>\n<span class=\"comment\">#  - transpile the code</span>\n<span class=\"comment\">#  - publish the new version on npm</span>\nship-release publish <span class=\"operator\">-d</span> <span class=\"string\">&apos;Fixed some nasty bug.&apos;</span>\n</code></pre>\n<hr>\n<p>That&apos;s the theory. Let&apos;s see all these running in the real world.</p>\n<h2 id=\"example\">Example</h2>\n<p>Today I&apos;m creating a small module called <code>stream-data</code> which will collect the data emitted by a stream and send it into a callback.</p>\n<h3 id=\"creating-the-package\">Creating the package</h3>\n<p>As mentioned above, I&apos;m using <code>np-init</code> to do that:</p>\n<pre><code class=\"lang-sh\">np-init stream-data &apos;Collect <span class=\"keyword\">the</span> stream data <span class=\"keyword\">and</span> send <span class=\"keyword\">it</span> <span class=\"keyword\">into</span> a callback function.&apos;\n</code></pre>\n<p>This created the following directory:</p>\n<pre><code class=\"lang-sh\">stream-data/\n&#x251C;&#x2500;&#x2500; (.git)\n&#x251C;&#x2500;&#x2500; example\n&#x2502;   &#x2514;&#x2500;&#x2500; index.js\n&#x251C;&#x2500;&#x2500; <span class=\"class\"><span class=\"keyword\">lib</span></span>\n&#x2502;   &#x2514;&#x2500;&#x2500; index.js\n&#x2514;&#x2500;&#x2500; package.json\n\n<span class=\"number\">2</span> directories, <span class=\"number\">3</span> files\n</code></pre>\n<h3 id=\"write-a-minimal-example\">Write a minimal example</h3>\n<p>When building a house, you have to start with the base. When building an npm package, I like to start with the roof.</p>\n<p>Even if the library doesn&apos;t do anything yet, I just set up an example the way I&apos;m thinking I want the module to work.</p>\n<p>So, I <code>cd stream-data</code> and write this (note that I already had something there created by <code>np-init</code>):</p>\n<pre><code class=\"lang-js\"><span class=\"pi\">&quot;use strict&quot;</span>;\n\n<span class=\"keyword\">const</span> streamData = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;../lib&quot;</span>)\n    , fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>)\n    ;\n\n<span class=\"comment\">// Create a read stream</span>\n<span class=\"keyword\">let</span> str = fs.createReadStream(<span class=\"string\">`<span class=\"subst\">${__dirname}</span>/input.txt`</span>);\n\n<span class=\"comment\">// Pass the stream object and a callback function</span>\nstreamData(str, (err, data) =&gt; {\n    <span class=\"built_in\">console</span>.log(err || data);\n    <span class=\"comment\">// =&gt; &quot;Hello World&quot;</span>\n});\n</code></pre>\n<h3 id=\"write-the-functionality-in-the-library\">Write the functionality in the library</h3>\n<p><code>np-init</code> generated a JSDoc comment, which initially looked like this:</p>\n<pre><code class=\"lang-js\">/<span class=\"keyword\">*</span><span class=\"keyword\">*</span>\n <span class=\"keyword\">*</span> streamData\n <span class=\"keyword\">*</span> Collect the stream data and send it into a callback function.\n <span class=\"keyword\">*</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@name streamData</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@function</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@param {Number} a Param descrpition.</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@param {Number} b Param descrpition.</span>\n <span class=\"keyword\">*</span> <span class=\"comment\">@return {Number} Return description.</span>\n <span class=\"keyword\">*</span>/\n</code></pre>\n<p>I slightly changed the function parameters&apos; names and updated the JSDoc comment:</p>\n<pre><code class=\"lang-js\"><span class=\"string\">&quot;use strict&quot;</span>;\n\n<span class=\"comment\">/**\n * streamData\n * Collect the stream data and send it into a callback function.\n *\n * <span class=\"doctag\">@name</span> streamData\n * <span class=\"doctag\">@function</span>\n * <span class=\"doctag\">@param</span> {Stream} str The stream object.\n * <span class=\"doctag\">@param</span> {Function} cb The callback function.\n * <span class=\"doctag\">@returns</span> {Stream} The stream object.\n */</span>\nmodule.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">streamData</span> <span class=\"params\">(str, cb)</span> </span>{\n\n    <span class=\"keyword\">if</span> (cb) {\n        <span class=\"keyword\">let</span> buffer = []\n          , error = <span class=\"keyword\">null</span>\n          ;\n\n        str.on(<span class=\"string\">&quot;data&quot;</span>, chunk =&gt; buffer.push(chunk));\n        str.on(<span class=\"string\">&quot;error&quot;</span>, err =&gt; error = err);\n        str.on(<span class=\"string\">&quot;end&quot;</span>, () =&gt; cb(error, buffer.join(<span class=\"string\">&quot;&quot;</span>), buffer));\n    }\n\n    <span class=\"keyword\">return</span> str;\n};\n</code></pre>\n<h3 id=\"run-the-example\">Run the example</h3>\n<p>Well, now we can see if it&apos;s really working.</p>\n<pre><code class=\"lang-sh\">$ <span class=\"keyword\">node</span><span class=\"identifier\"> </span><span class=\"title\">example</span>/\nHello World!\n</code></pre>\n<p>Before publishing it, we need to set up some tests.</p>\n<h3 id=\"tests\">Tests</h3>\n<p>For testing I use <a href=\"https://github.com/IonicaBizau/tester\"><code>tester</code></a>. To add <code>tester</code> in my project I do <a href=\"https://github.com/IonicaBizau/tester-init\"><code>tester-init</code></a>.</p>\n<pre><code class=\"lang-sh\">$ tester-init\n<span class=\"bullet\">...\n</span>$ tree\n<span class=\"bullet\">...\n</span>&#x2514;&#x2500;&#x2500; test\n<span class=\"code\">    &#x2514;&#x2500;&#x2500; index.js</span>\n</code></pre>\n<p>After writing a few tests, the module is ready to be published on GitHub and npm.</p>\n<h3 id=\"publishing\">Publishing</h3>\n<p>We have to create a GitHub repository. I use <a href=\"https://github.com/mattdesl/ghrepo\"><code>ghrepo</code></a> by <a href=\"https://github.com/mattdesl\"><strong>@mattdesl</strong></a> (thanks! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//cake.png\" title=\"cake\" alt=\":cake:\"> <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//grin.png\" title=\"grin\" alt=\":grin:\">). It&apos;s smart enough to create the GitHub repository with the right data (taken from the local git repository url and <code>package.json</code>).</p>\n<pre><code class=\"lang-sh\">ghrepo <span class=\"comment\">--bare --no-open</span>\nship-<span class=\"operator\"><span class=\"keyword\">release</span> bump\nship-<span class=\"keyword\">release</span> publish -<span class=\"keyword\">d</span> <span class=\"string\">&apos;Initial release&apos;</span></span>\n</code></pre>\n<p>Looking in my directory now, I have a couple of new files (<code>README.md</code>, <code>CONTRIBUTING.md</code>, <code>.gitignore</code> etc).</p>\n<p>Now my module is on GitHub and npm ready to be <code>npm install</code>ed:</p>\n<pre><code class=\"lang-js\"><span class=\"comment\">// After doing: `npm install --save stream-data`</span>\n\n<span class=\"keyword\">const</span> streamData = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;stream-data&quot;</span>)\n    , fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>)\n    ;\n\n<span class=\"comment\">// Create a read stream</span>\n<span class=\"keyword\">let</span> str = fs.createReadStream(<span class=\"string\">`<span class=\"subst\">${__dirname}</span>/input.txt`</span>);\n\n<span class=\"comment\">// Pass the stream object and a callback function</span>\nstreamData(str, (err, data) =&gt; {\n    <span class=\"built_in\">console</span>.log(err || data);\n});\n</code></pre>\n<h2 id=\"-mortar_board-things-i-learned\"><img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//mortar_board.png\" title=\"mortar_board\" alt=\":mortar_board:\"> Things I learned</h2>\n<p>Do not do manual work. Optimize things as much as you can. Otherwise, you&apos;ll waste your precious time. Create your team of bots to help you to optimize things.</p>\n<p>Happy <em>npm</em>ing! <img class=\"no-lightbox emoji\" src=\"/api/plugin-file/emoji/images//tada.png\" title=\"tada\" alt=\":tada:\"></p>\n<hr>\n<p><sub>If you like to support what I do, <a href=\"/donate\">here is how you can do it</a>.</sub></p>"
    }
  ],
  "pages": [
    {
      "title": "Blog",
      "url": "/"
    },
    {
      "title": "About",
      "url": "/about"
    },
    {
      "title": "FAQ",
      "url": "/faq"
    },
    {
      "title": "Training",
      "url": "/training"
    },
    {
      "title": "Contact",
      "url": "/contact"
    },
    {
      "title": "Donate",
      "url": "/donate"
    },
    {
      "title": "CV",
      "url": "/cv"
    }
  ],
  "title": "Ionică Bizău",
  "desc": "Web Developer,  Linux geek and  Musician",
  "avatar": "/images/logo.png"
}
